import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import NavBar from "../../../components/NavBar/NavBar";
import Footer from "../../../components/Footer/footer";
import "./OnMyAppointment.css";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import Swal from "sweetalert2";
import logo from '/website_logo.png'; // Add this import at top
import QRCode from 'qrcode'; // Add this import

function OnMyAppointment() {
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  // Delete appointment with confirmation
  const deleteAppointment = async (id) => {
    Swal.fire({
      title: "Confirm Deletion",
      text: "Are you sure you want to delete this appointment? This action cannot be undone.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      confirmButtonText: "Delete Appointment",
      cancelButtonText: "Cancel",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          await axios.delete(
            `http://localhost:3000/api/doctorappointment/deletedoctorappointment/${id}`
          );
          Swal.fire({
            title: "Success",
            text: "Appointment has been successfully deleted.",
            icon: "success",
            confirmButtonColor: "#15803d",
          }).then(() => {
            window.location.reload();
          });
        } catch (error) {
          console.error("Deletion error:", error);
          Swal.fire({
            title: "Error",
            text: "Unable to delete appointment. Please try again.",
            icon: "error",
            confirmButtonColor: "#dc2626",
          });
        }
      }
    });
  };

  // Generate PDF with refined styling
  const generatePDF = async (appointment) => {
    const doc = new jsPDF();
    
    // Generate QR code
    const qrData = await QRCode.toDataURL(`APPOINTMENT_ID:${appointment._id}`);
    
    // Add logo and header
    doc.addImage(logo, 'PNG', 15, 10, 25, 25);
    
    // Add decorative elements
    doc.setDrawColor(253, 115, 17);
    doc.setLineWidth(0.5);
    doc.line(15, 42, 195, 42);
    
    // Add header text
    doc.setTextColor(44, 82, 130);
    doc.setFont("helvetica", "bold");
    doc.setFontSize(24);
    doc.text("HealthOptics", 50, 25);
    
    doc.setTextColor(70, 70, 70);
    doc.setFontSize(12);
    doc.setFont("helvetica", "italic");
    doc.text("Your Trusted Partner in Eye Care", 50, 35);

    // Add QR code and reference number
    doc.addImage(qrData, 'PNG', 160, 10, 35, 35);
    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);
    doc.text(`Ref: ${appointment._id.slice(-8).toUpperCase()}`, 160, 48);

    // Add appointment details
    doc.setTextColor(44, 82, 130);
    doc.setFont("helvetica", "bold");
    doc.setFontSize(16);
    doc.text("Appointment Details", 15, 60);
    
    // Add current date
    doc.setTextColor(70, 70, 70);
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 130, 60);

    // Configure table
    const tableColumn = ["Field", "Information"];
    const tableRows = [
      ["Patient Name", `${appointment.firstname} ${appointment.lastname}`],
      ["Age", `${appointment.age} Years`],
      ["Gender", appointment.gender],
      ["Email", appointment.email],
      ["Contact", appointment.contact],
      ["Address", appointment.address],
      ["Appointment Date", appointment.date],
      ["Time Slot", appointment.timeSlot],
      ["Doctor", `Dr. ${appointment.doctor}`],
      ["Consultation Fee", `Rs ${appointment.doctorfee || 2500}.00`]
    ];

    // Add table with enhanced styling
    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 70,
      theme: 'grid',
      styles: {
        fontSize: 10,
        cellPadding: 7,
        lineColor: [220, 220, 220],
        lineWidth: 0.1,
      },
      headStyles: {
        fillColor: [44, 82, 130],
        textColor: 255,
        fontSize: 11,
        fontStyle: 'bold',
        halign: 'center'
      },
      alternateRowStyles: {
        fillColor: [245, 247, 250]
      },
      columnStyles: {
        0: { fontStyle: 'bold', cellWidth: 60 },
        1: { cellWidth: 'auto' }
      },
    });

    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setDrawColor(44, 82, 130);
    doc.setLineWidth(0.5);
    doc.line(15, pageHeight - 25, 195, pageHeight - 25);
    
    doc.setFontSize(8);
    doc.setTextColor(130, 130, 130);
    doc.text(
      'This is a computer-generated document. No signature is required.',
      doc.internal.pageSize.width / 2,
      pageHeight - 20,
      { align: 'center' }
    );
    
    doc.text(
      `Document generated by HealthOptics Online System`,
      doc.internal.pageSize.width / 2,
      pageHeight - 15,
      { align: 'center' }
    );

    // Save with formatted name
    doc.save(`HealthOptics_Appointment_${appointment._id.slice(-8).toUpperCase()}.pdf`);
  };

  // Fetch appointment data
  useEffect(() => {
    const fetchAppointments = async () => {
      try {
        const currentUser = JSON.parse(localStorage.getItem("currentUser"));
        const email = currentUser?.email;
        
        if (!email) {
          setError("Please login to view appointments");
          navigate("/loginpage");
          return;
        }

        const response = await axios.post(
          `http://localhost:3000/api/doctorappointment/getalldoctorappointment/${email}`
        );

        if (response.data.doctorAppointments) {
          setAppointments(response.data.doctorAppointments);
        } else {
          setError("No appointments found");
        }
      } catch (error) {
        console.error("Fetch error:", error);
        setError(error.response?.data?.message || "Unable to retrieve appointment details");
      } finally {
        setLoading(false);
      }
    };

    fetchAppointments();
  }, [navigate]);

  if (loading) return <div className="OMA-status-message OMA-loading">Loading Appointments...</div>;
  if (error) return <div className="OMA-status-message OMA-error">{error}</div>;
  if (!appointments.length) return <div className="OMA-status-message">No appointments found.</div>;

  return (
    <div className="OMA-appointment-page">
      <NavBar />
      <main className="OMA-appointment-container">
        {appointments.map((appointment) => (
          <section key={appointment._id} className="OMA-appointment-card">
            <header className="OMA-card-header">
              <h1 className="OMA-card-title">Appointment Details</h1>
              <p className="OMA-card-subtitle">Summary of Patient and Appointment Information</p>
            </header>
            <div className="OMA-details-wrapper">
              <div className="OMA-details-section OMA-patient-section">
                <h2 className="OMA-section-title">Patient Information</h2>
                <div className="OMA-details-grid">
                  <DetailItem label="Full Name" value={`${appointment.firstname} ${appointment.lastname}`} />
                  <DetailItem label="Age" value={`${appointment.age} Years`} />
                  <DetailItem label="Gender" value={appointment.gender} />
                  <DetailItem label="Email" value={appointment.email} />
                  <DetailItem label="Contact" value={appointment.contact} />
                  <DetailItem label="Address" value={appointment.address} />
                </div>
              </div>

              <div className="OMA-details-section OMA-appointment-section">
                <h2 className="OMA-section-title">Appointment Information</h2>
                <div className="OMA-details-grid">
                  <DetailItem label="Date" value={appointment.date} />
                  <DetailItem label="Time" value={appointment.timeSlot} />
                  <DetailItem label="Doctor" value={`Dr. ${appointment.doctor}`} />
                  <DetailItem label="Total Fee" value={`Rs ${appointment.doctorfee || 0}.00`} />
                </div>
              </div>
            </div>

            <div className="OMA-action-buttons">
              <Link to={`/editdoctorappointment/${appointment._id}`}>
                <button className="OMA-btn OMA-btn-update">Edit Appointment</button>
              </Link>
              <button className="OMA-btn OMA-btn-delete" onClick={() => deleteAppointment(appointment._id)}>
                Delete Appointment
              </button>
              <button className="OMA-btn OMA-btn-download" onClick={() => generatePDF(appointment)}>
                Download PDF
              </button>
            </div>
          </section>
        ))}
      </main>
      <Footer />
    </div>
  );
}

// Reusable DetailItem component
const DetailItem = ({ label, value }) => (
  <div className="OMA-detail-item">
    <span className="OMA-detail-label">{label}</span>
    <span className="OMA-detail-value">{value}</span>
  </div>
);

export default OnMyAppointment;